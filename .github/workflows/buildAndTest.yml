# This is a basic workflow to help you get started with Actions
name: Build and Test
# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # Build Phism and run its tests.
  build-phism:
    name: Build and Test Phism
    runs-on: self-hosted
    steps:
      # - name: Configure Environment
      #   run: echo "${GITHUB_WORKSPACE}/llvm/install/bin" >> $GITHUB_PATH
      # Disabled for self-hosted
      # - name: Get dependences
      #   run: |
      #     sudo apt-get update -y
      #     sudo apt-get install -y build-essential libtool autoconf pkg-config flex bison libgmp-dev clang-9 libclang-9-dev texinfo python3
      # - name: Update the LLVM/Clang version to 9
      #   run: |
      #     sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-9 100
      #     sudo update-alternatives --install /usr/bin/FileCheck FileCheck /usr/bin/FileCheck-9 100
          
     
      # Clone the Phism repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get Phism
        uses: actions/checkout@v2
        with:
          submodules: "true"
    
      # --------
      # Restore LLVM from cache and build if it's not in there.
      # --------
      # Extract the LLVM submodule hash for use in the cache key.
      - name: Get LLVM Hash
        id: get-llvm-hash
        run: echo "::set-output name=hash::$(git rev-parse @:./llvm)"
        shell: bash
      # Try to fetch LLVM from the cache.
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: llvm/build
          key: ${{ runner.os }}-llvm-${{ steps.get-llvm-hash.outputs.hash }}
      # Build LLVM if we didn't hit in the cache. Even though we build it in
      # the previous job, there is a low chance that it'll have been evicted by
      # the time we get here.
      # Need to delete the test directory to avoid caching them.
      - name: Rebuild and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          ./scripts/build-llvm.sh ci
          rm -rf ./llvm/build/test 
      # --------
      # Build and test Phism in both debug and release mode.
      # --------
      - name: Build and Test Phism (Assert)
        run: |
          ./scripts/build-phism.sh ci
      
      # Build and test Phism with pb-flow.
      - name: Build and Test Phism (pb-flow)
        run: |
          python3 -m venv env
          source env/bin/activate
          which python3
          python3 -m pip install -r requirements.txt
          python3 ./scripts/pb-flow.py ./example/polybench --dataset MINI --sanity-check
          python3 ./scripts/pb-flow.py ./example/polybench --dataset MINI --polymer --sanity-check
          python3 ./scripts/pb-flow.py ./example/polybench --dataset MINI --polymer --loop-transforms --sanity-check
          python3 ./scripts/pb-flow.py ./example/polybench --dataset SMALL --skip-vitis
          python3 ./scripts/pb-flow.py ./example/polybench --dataset SMALL --polymer --skip-vitis
          python3 ./scripts/pb-flow.py ./example/polybench --dataset SMALL --polymer --loop-transforms --skip-vitis
          python3 ./scripts/pb-flow.py ./example/polybench --dataset SMALL --polymer --loop-transforms --array-partition --skip-vitis



