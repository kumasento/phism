# This is a basic workflow to help you get started with Actions

name: Build and Test

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on: [push, pull_request]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  # Build the LLVM submodule then cache it. Do not rebuild if hit in the
  # cache.
  build-llvm:
    name: Build LLVM
    runs-on: ubuntu-20.04
    steps:
      # Clone the Phism repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get Phism
        uses: actions/checkout@v2
        with:
          submodules: "true"

      # Extract the LLVM submodule hash for use in the cache key.
      - name: Get LLVM Hash
        id: get-llvm-hash
        run: echo "::set-output name=hash::$(git rev-parse @:./llvm)"
        shell: bash

      # Print out clang version
      - name: Get clang version
        id: get-clang-version
        run: clang --version
        shell: bash

      # Try to fetch LLVM from the cache.
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: llvm
          key: ${{ runner.os }}-llvm-install-${{ steps.get-llvm-hash.outputs.hash }}

      # Build LLVM if we didn't hit in the cache.
      - name: Rebuild and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          mkdir llvm/build
          mkdir llvm/install
          cd llvm/build
          cmake ../llvm \
            -DLLVM_BUILD_EXAMPLES=OFF \
            -DLLVM_TARGETS_TO_BUILD="host" \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DLLVM_ENABLE_PROJECTS="llvm;mlir;clang" \
            -DLLVM_OPTIMIZED_TABLEGEN=ON \
            -DLLVM_ENABLE_OCAMLDOC=OFF \
            -DLLVM_ENABLE_BINDINGS=OFF \
            -DLLVM_INSTALL_UTILS=ON \
            -DCMAKE_C_COMPILER=clang-9 \
            -DCMAKE_CXX_COMPILER=clang++-9 \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=ON
          cmake --build . --target install -- -j$(nproc)
    # Installing the results into the cache is an action which is automatically
    # added by the cache action above.

  # --- end of build-llvm job.

  # Build Phism and run its tests.
  build-phism:
    name: Build and Test Phism
    needs: build-llvm
    runs-on: ubuntu-20.04
    steps:
      # - name: Configure Environment
      #   run: echo "${GITHUB_WORKSPACE}/llvm/install/bin" >> $GITHUB_PATH
      - name: Get dependences
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential libtool autoconf pkg-config flex bison libgmp-dev clang-9 libclang-9-dev texinfo

      - name: Update the LLVM/Clang version to 9
        run: |
          sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-9 100
          sudo update-alternatives --install /usr/bin/FileCheck FileCheck /usr/bin/FileCheck-9 100
          
     
      # Clone the Phism repo and its submodules. Do shallow clone to save clone
      # time.
      - name: Get Phism
        uses: actions/checkout@v2
        with:
          submodules: "true"
    
      # --------
      # Restore LLVM from cache and build if it's not in there.
      # --------

      # Extract the LLVM submodule hash for use in the cache key.
      - name: Get LLVM Hash
        id: get-llvm-hash
        run: echo "::set-output name=hash::$(git rev-parse @:./llvm)"
        shell: bash

      # Try to fetch LLVM from the cache.
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: llvm
          key: ${{ runner.os }}-llvm-install-${{ steps.get-llvm-hash.outputs.hash }}

      # Build LLVM if we didn't hit in the cache. Even though we build it in
      # the previous job, there is a low chance that it'll have been evicted by
      # the time we get here.
      - name: Rebuild and Install LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: |
          mkdir llvm/build
          mkdir llvm/install
          cd llvm/build
          cmake ../llvm \
            -DLLVM_BUILD_EXAMPLES=OFF \
            -DLLVM_TARGETS_TO_BUILD="host" \
            -DCMAKE_INSTALL_PREFIX=../install \
            -DLLVM_ENABLE_PROJECTS="llvm;mlir;clang" \
            -DLLVM_OPTIMIZED_TABLEGEN=ON \
            -DLLVM_ENABLE_OCAMLDOC=OFF \
            -DLLVM_ENABLE_BINDINGS=OFF \
            -DLLVM_INSTALL_UTILS=ON \
            -DCMAKE_C_COMPILER=clang-9 \
            -DCMAKE_CXX_COMPILER=clang++-9 \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=ON
          cmake --build . --target install -- -j$(nproc)

      # --------
      # Build and test Phism in debug mode.
      # --------

      - name: Build and Test P hism(Assert)
        run: |
          mkdir build_assert
          cd build_assert
          cmake .. \
            -DCMAKE_BUILD_TYPE=Debug \
            -DLLVM_ENABLE_ASSERTIONS=ON \
            -DMLIR_DIR=${PWD}/../llvm/install/lib/cmake/mlir/ \
            -DLLVM_DIR=${PWD}/../llvm/install/lib/cmake/llvm/ \
            -DCMAKE_C_COMPILER=clang-9 \
            -DCMAKE_CXX_COMPILER=clang++-9 \
            -DLLVM_EXTERNAL_LIT=${PWD}/../llvm/build/bin/llvm-lit \
            -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
          cmake --build . --target check-phism


