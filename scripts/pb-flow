#!/usr/bin/env bash

# Polybench evaluation flow.
#
# Usage:
#   ./pb-flow <polybench directory>

set -o errexit
set -o pipefail
set -o nounset

# ---------------------- GLOBALS --------------------------------
TIMESTAMP="$(date "+%Y%m%d-%H%M%S")"
DIR="$(cd "$(dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd)"
LLVM_DIR="${DIR}/../llvm"
LLVM_BINDIR="${LLVM_DIR}/build/bin"
LLVM_LIBDIR="${LLVM_DIR}/build/lib"
PLUTO_LIBDIR="${LLVM_DIR}/build/tools/mlir/tools/polymer/pluto/lib"
PHISM_DIR="${DIR}/../"
PHISM_BINDIR="${PHISM_DIR}/build/bin"
PHISM_LIBDIR="${PHISM_DIR}/build/lib"

export PATH="${LLVM_BINDIR}:${PATH}"
export PATH="${PHISM_BINDIR}:${PATH}"
export LD_LIBRARY_PATH="${LLVM_LIBDIR}:${PLUTO_LIBDIR}:${PHISM_LIBDIR}:${LD_LIBRARY_PATH}"

# ------------------------- CLI ---------------------------------
# TODO: use getopts
POLYBENCH_DIR="${1}"
if [ ! -d "${POLYBENCH_DIR}" ]; then
  echo "Please pass in a valid polybench directory as #1 arg."
  exit 1
fi

ENABLE_POLYMER="${2:-0}"

# ---------------------- FUNCTIONS ------------------------------

# Get the top-level function name based on the src_file name.
# The rule is simply <name>.c -> "kernel_<name>"
function get_top_func() {
  local src_file="${1}"
  local src_name
  src_name="$(basename "$(dirname "${src_file}")")"

  echo "kernel_${src_name}" | tr '-' '_' # handles floyd-warshall, jacobi-1d, etc.
}

# Compile the source c file to MLIR using Polygeist.
function compile_c_to_mlir() {
  local src_file="${1}"
  local dst_file="${src_file%.c}.mlir"

  mlir-clang "${src_file}" \
    -memref-fullrank \
    -D MINI_DATASET \
    -I="${LLVM_LIBDIR}/clang/13.0.0/include" \
    -I="${POLYBENCH_DIR}/utilities" > "${dst_file}"

  echo "${dst_file}"
}

# Extract the top function and all the stuff it calls.
function extract_top_func_from_mlir() {
  local src_file="${1}"
  local dst_file="${src_file%.mlir}.kern.mlir"
  local top_func
  top_func="$(get_top_func "${src_file}")"

  phism-opt "${src_file}" \
    -extract-top-func="name=${top_func}" > "${dst_file}"

  echo "${dst_file}"
}

# Optimize MLIR code by Polymer.
function polymer_opt() {
  local src_file="${1}"
  local dst_file="${src_file%.mlir}.plm.mlir"

  if [[ ${ENABLE_POLYMER} -eq 1 ]]; then
    polymer-opt "${src_file}" \
      -reg2mem \
      -insert-redundant-load \
      -extract-scop-stmt \
      -pluto-opt \
      -inline 2>/dev/null > "${dst_file}"
  else
    cp "${src_file}" "${dst_file}"
  fi

  echo "${dst_file}"
}

function lower_mlir_to_llvm() {
  local src_file="${1}"
  local dst_file="${src_file%.mlir}.ll"

  mlir-opt "${src_file}" \
    -lower-affine \
    -inline \
    -convert-scf-to-std \
    -canonicalize \
    -convert-std-to-llvm='use-bare-ptr-memref-call-conv=1' |\
    mlir-translate -mlir-to-llvmir > "${dst_file}"

  echo "${dst_file}"
}

# Call Phism LLVM passes.
function opt_llvm_for_vitis() {
  local src_file="${1}"
  local dst_file="${src_file%.ll}.vitis.ll"
  local top_func
  top_func="$(get_top_func "${src_file}")"

  # Polymer optimized functions have an _opt suffix.
  if [[ ${ENABLE_POLYMER} -eq 1 ]]; then
    top_func="${top_func}_opt"
  fi

  "${LLVM_BINDIR}/opt" "${src_file}" \
    -S \
    -enable-new-pm=0 \
    -load "${PHISM_LIBDIR}/VhlsLLVMRewriter.so" \
    -strip-debug \
    -mem2arr \
    -instcombine \
    -xlnmath \
    -xlnname \
    -xlnanno -xlntop="${top_func}" \
    -strip-attr \
    > "${dst_file}"
  
  echo "${dst_file}"
}

# Generate dummy C source.
function gen_dummy_c() {
  local src_file="${1}"
  local src_base
  local top_func
  local dst_file

  src_base="$(basename "$(dirname "${src_file}")")"
  dst_file="$(dirname "${src_file}")/${src_base}.dummy.c"
  top_func="$(get_top_func "${src_file}")"

  # Polymer optimized functions have an _opt suffix.
  if [[ ${ENABLE_POLYMER} -eq 1 ]]; then
    top_func="${top_func}_opt"
  fi

cat <<EOF > "${dst_file}"
void ${top_func}() {}
EOF

  echo "${dst_file}"
}

# Generate the run_hls.tcl file
function gen_vitis_tcl() {
  local src_file="${1}"
  local src_base
  local src_dir
  local dst_file
  local top_func
  local dummy_c_src

  src_dir="$(dirname "${src_file}")"
  src_base="$(basename "${src_dir}")"
  dst_file="$(dirname "${src_file}")/run_hls.tcl"
  dst_tb_file="$(dirname "${src_file}")/tb_gen.tcl"
  dst_cosim_file="$(dirname "${src_file}")/cosim.tcl"
  top_func="$(get_top_func "${src_file}")"
  dummy_c_src="$(gen_dummy_c "${src_file}")"

  # Polymer optimized functions have an _opt suffix.
  if [[ ${ENABLE_POLYMER} -eq 1 ]]; then
    top_func="${top_func}_opt"
  fi

  # Remove 'static' in all functions - the top design cannot be static
  sed -i 's/static//g' ${src_dir}/${src_base}.c

  # Synthesis script
  cat <<EOF > "${dst_file}"
open_project -reset proj
add_files ${dummy_c_src}
set_top ${top_func}

open_solution -reset solution1
set_part "zynq"
create_clock -period "100MHz"
config_bind -effort high

set ::LLVM_CUSTOM_CMD {\$LLVM_CUSTOM_OPT -no-warn ${src_file} -o \$LLVM_CUSTOM_OUTPUT}

csynth_design

exit
EOF

  # Testbench generation script / C baseline
  # TODO: need to handle these lib and polybench.c properly
  cat <<EOF > "${dst_tb_file}"
open_project -reset tb
add_files {${src_dir}/${src_base}.c} -cflags "-I ${src_dir} -I /workspace/example/polybench/utilities -DMINI_DATASET" -csimflags "-I ${src_dir} -I /workspace/example/polybench/utilities -DMINI_DATASET"
add_files -tb {${src_dir}/${src_base}.c /workspace/example/polybench/utilities/polybench.c} -cflags "-I ${src_dir} -I /workspace/example/polybench/utilities -DMINI_DATASET" -csimflags "-I ${src_dir} -I /workspace/example/polybench/utilities -DMINI_DATASET"
set_top ${top_func}

open_solution -reset solution1
set_part "zynq"
create_clock -period "100MHz"
config_bind -effort high

csim_design
csynth_design
cosim_design

exit
EOF

  # Co-simulation script
  cat <<EOF > "${dst_cosim_file}"
open_project tb

open_solution solution1

cosim_design

exit
EOF

  echo "${src_file}"
}

# Run Vitis.
function run_vitis() {
  local src_file="${1}"
  local dst_file="$(dirname "${src_file}")/run_hls.tcl"
  local dst_tb_file="$(dirname "${src_file}")/tb_gen.tcl"
  local dst_cosim_file="$(dirname "${src_file}")/cosim.tcl"
  local src_dir
  
  src_dir="$(dirname "${src_file}")"

  cd "${src_dir}"

  set -x

  # Synthesize for Phism
  vitis_hls "${dst_file}" &> "${src_dir}"/vhls.syn.log

  # Generate test bench
  vitis_hls "${dst_tb_file}" &> "${src_dir}"/vhls.tbgen.log
  if grep -q "*** C/RTL co-simulation finished: FAIL ***" "${src_dir}"/vhls.tbgen.log; then
    echo "*** C/RTL co-simulation finished: C BASELINE - FAIL ***"
  elif ! grep -q "*** C/RTL co-simulation finished: PASS ***" "${src_dir}"/vhls.tbgen.log; then
    echo "*** C/RTL co-simulation failed: C BASELINE - UNKNOWN ERROR ***"
  fi

  # Copy the kernel from Phism to the test bench
  cp "${src_dir}"/proj/solution1/syn/verilog/*.v* "${src_dir}"/tb/solution1/sim/verilog/
  
  # Run co-simulation
  vitis_hls "${dst_cosim_file}" &> "${src_dir}"/vhls.cosim.log
  if grep -q "*** C/RTL co-simulation finished: PHISM - FAIL ***" "${src_dir}"/vhls.cosim.log; then
    echo "*** C/RTL co-simulation finished: FAIL ***"
  elif ! grep -q "*** C/RTL co-simulation finished: PASS ***" "${src_dir}"/vhls.cosim.log; then
    echo "*** C/RTL co-simulation failed: PHISM - UNKNOWN ERROR ***"
  fi

  set +x

  # Read time from vitis_hls.log
  # e.g. $finish called at time : 13920290 ps
  # JC: there is a formula to convert this to cycles, but I do not remember now - it should be OK for now

  local status=$?

  cd - >/dev/null

  echo "${status}"
}

# Evaluate a single C source file. This is the Phism pipeline btw.
function eval_file() {
  local src_file="${1}"

  printf ">> Evaluating source file: %s ..." "${src_file}"

  local mlir_src_file
  local kern_src_file

  mlir_src_file="$(compile_c_to_mlir "${src_file}")"
  kern_src_file="$(extract_top_func_from_mlir "${mlir_src_file}")"
  poly_src_file="$(polymer_opt "${kern_src_file}")"
  llvm_src_file="$(lower_mlir_to_llvm "${poly_src_file}")"
  vitis_src_file="$(opt_llvm_for_vitis "${llvm_src_file}")"
  vitis_tcl_file="$(gen_vitis_tcl "${vitis_src_file}")"

  local status
  status="$(run_vitis "${vitis_tcl_file}")"

  if [[ "${status}" = "0" ]]; then
    echo " SUCCESS"
  else
    echo " FAILED"
  fi
}

# Evaluate through every C source file in the provided directory.
function eval_dir() {
  local src_dir="${1}"

  find "${src_dir}" -name "*.c" -print0 |
    while IFS= read -r -d '' line; do 
      if [[ "${line}" == *"utilities"* ]]; then
        # Files under the utilities directory are ignored.
        continue
      fi

      if [[ "${line}" == *"Nussinov.orig.c" ]]; then
        # A special case: Nussinov.orig.c won't be included.
        continue
      fi

      eval_file "${line}"
    done
}

# Copy source files from the SOURCE_DIR ($1) to a temporary place in the OUTPUT_DIR ($2).
function copy_source_files() {
  local src_dir="$1"
  local dst_dir="$2"

  mkdir -p "${dst_dir}"

  echo ""
  echo ">> Copying source files from ${src_dir} to ${dst_dir} ..."

  cp -r "${src_dir}"/* "${dst_dir}"

  echo ""
}

# Main entry.
function main() {
  local polybench_dir="${1}"
  local tmp_dir="/tmp/phism/pb-flow.${TIMESTAMP}"

  # Welcome messages.
  echo ""
  echo "    Polybench Evaluation Flow    "
  echo ""
  echo "Setup:"
  echo "  TIMESTAMP:     ${TIMESTAMP}"
  echo "  POLYBENCH_DIR: ${polybench_dir}"
  echo "  WORKING_DIR:   ${tmp_dir}"
  echo ""

  copy_source_files "${polybench_dir}" "${tmp_dir}"
  eval_dir "${tmp_dir}"
}

# ----------------------- MAIN -------------------------

main "${POLYBENCH_DIR}"
